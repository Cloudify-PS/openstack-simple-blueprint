tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://cloudify.co/spec/cloudify/5.0.0/types.yaml


inputs:

  agent_key_private:
    description: >
      The content of the agent's private key.
    default: { get_secret: agent_key_private }

  agent_key_public:
    description: >
      The content of the agent's public key.
    default: { get_secret: agent_key_public }

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: ubuntu

  image:
    description: >
      An Openstack Image ID. Tested with a Ubuntu 14.04 image.
    type: string
    default: { get_secret: ubuntu_trusty_image }

  flavor:
    description: >
      An Openstack Flavor ID.
    default: '2'

  manager_network:
    default: default

  network_deployment_name:
    default: openstack-example-network

dsl_definitions:

  openstack_config: &openstack_config
    username: { get_secret: keystone_username }
    password: { get_secret: keystone_password }
    tenant_name: { get_secret: keystone_tenant_name }
    auth_url: { get_secret: keystone_url }
    region: { get_secret: keystone_region }


node_types:
  nodes.MonitoredServer:
    derived_from: cloudify.openstack.nodes.Server
    properties:
      agent_config:
        default:
          network: { get_input: manager_network }
          install_method: init_script
          user: { get_input: agent_user }
          port: 22
          key: { get_input: agent_key_private }
      server:
        default:
          key_name: ''
          image: { get_input: image }
          flavor: { get_input: flavor }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: openstack.nova_plugin.server.create
          inputs:
            args:
              default:
                image: { get_input: image }
                flavor: { get_input: flavor }
                userdata: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }

node_templates:

  cloudify_host_cloud_config:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      resource_config:
        users:
        - name: { get_input: agent_user }
          groups: sudo
          shell: /bin/bash
          sudo: ['ALL=(ALL) NOPASSWD:ALL']
          ssh-authorized-keys:
          - { get_input: agent_key_public }

  openstack:
    type: cloudify.nodes.SharedResource
    properties:
      client:
        host: 127.0.0.1
        username: admin
        password: admin
        tenant: default_tenant
      resource_config:
        deployment:
          id: { get_input : network_deployment_name }


  frontend_host:
    type: nodes.MonitoredServer
    properties:
      openstack_config: *openstack_config
    relationships:
      - target: host_port
        type: cloudify.openstack.server_connected_to_port
      - type: cloudify.relationships.depends_on
        target: cloudify_host_cloud_config

  floating_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_id: { get_capability: [ get_attribute : [openstack, deployment, id], external_network ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: openstack


  host_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: floating_ip


  security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        description: security_group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: 22
        - remote_ip_prefix: 0.0.0.0/0
          port: 80

  public_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_capability: [ get_attribute : [openstack, deployment, id], public_subnet ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: public_network

  public_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_capability: [ get_attribute : [openstack, deployment, id], public_network ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: openstack
